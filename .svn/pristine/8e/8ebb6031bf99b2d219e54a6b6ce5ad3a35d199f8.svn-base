package com.springmvc.relationdrug.rules.service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.beanutils.converters.StringArrayConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.springmvc.relationdrug.dao.RepeatDrugLimitDao;
import com.springmvc.relationdrug.dao.impl.BasicDrugCheckDaoImpl;
import com.springmvc.relationdrug.dao.impl.SkinTestDaoImpl;
import com.springmvc.relationdrug.domain.BasicDrugCheck;
import com.springmvc.relationdrug.domain.DrugType;
import com.springmvc.relationdrug.domain.RepeatDrugLimit;
import com.springmvc.relationdrug.enums.GradeEnum;
import com.springmvc.relationdrug.enums.RuleTypeEnum;
import com.springmvc.relationdrug.pojo.PrescribeCell;
import com.springmvc.relationdrug.pojo.ReportDetail;
import com.springmvc.relationdrug.service.DrugTypeService;

import edu.emory.mathcs.backport.java.util.Collections;

/**
 * 重复用药检测
 */
@Transactional
@Service
public class RepeatDrugService {

	@Resource
	private RepeatDrugLimitDao repeatDrugLimitDao;
	@Resource
	@Autowired
	private BasicDrugCheckDaoImpl bDaoImpl;
	@Resource
	@Autowired
	private SkinTestDaoImpl sk;

	public RepeatDrugLimitDao getRepeatDrugLimitDao() {
		return repeatDrugLimitDao;
	}

	public void setRepeatDrugLimitDao(RepeatDrugLimitDao repeatDrugLimitDao) {
		this.repeatDrugLimitDao = repeatDrugLimitDao;
	}

	public BasicDrugCheckDaoImpl getbDaoImpl() {
		return bDaoImpl;
	}

	public void setbDaoImpl(BasicDrugCheckDaoImpl bDaoImpl) {
		this.bDaoImpl = bDaoImpl;
	}

	public SkinTestDaoImpl getSk() {
		return sk;
	}

	public void setSk(SkinTestDaoImpl sk) {
		this.sk = sk;
	}

	public List<ReportDetail> check(List<PrescribeCell> cellList) {

		List<ReportDetail> reportList = new ArrayList<ReportDetail>();

		// 首先判断药品数量是否大于1,大于1才会检测重复用药；
		if (cellList.size() > 1) {
			// 根据药品code排序
			Collections.sort(cellList, new Comparator<PrescribeCell>() {
				public int compare(PrescribeCell paramT1, PrescribeCell paramT2) {
					BasicDrugCheck b = bDaoImpl.get(paramT1.getBasicDrugCheck()
							.getBasicDrugCheckId());
					BasicDrugCheck b2 = bDaoImpl.get(paramT2
							.getBasicDrugCheck().getBasicDrugCheckId());
					return b.getDrugCode().compareTo(b2.getDrugCode());
				}
			});

			StringBuilder repeatInfo = cellCheck(cellList);

			if (repeatInfo.length() != 0) {
				repeatInfo.deleteCharAt(repeatInfo.length() - 1);
				String[] result1 = repeatInfo.toString().split(";");
				String[] result2 = result1;

				for (int i = 0; i < result1.length; i++) {
					String x = result1[i].split("】")[0] + "】";
					result2[i] = x.trim();
				}
				String[] result = array_unique(result2);
				for (int i = 0; i < result.length; i++) {
					// String x ="药品"+result[i]+"，建议只使用一种";
					String x = result[i] + "属同一类药，建议只使用一种";
					ReportDetail report = new ReportDetail(
							RuleTypeEnum.doctorAdvice);
					report.setGrade(GradeEnum.ADVICE);
					report.setRemark(x.toString());
					reportList.add(report);
				}
			}
			// repeatInfo不为空时，记录检测结果
			if (repeatInfo.length() != 0) {
				ReportDetail report = new ReportDetail(
						RuleTypeEnum.repeatDrugChecker);
				report.setGrade(GradeEnum.CAUTION);
				report.setRemark(repeatInfo.toString());
				reportList.add(report);
				return reportList;
			} else {
				ReportDetail report = new ReportDetail(
						RuleTypeEnum.repeatDrugChecker);
				report.setGrade(GradeEnum.WARN);
				report.setRemark("无");
				reportList.add(report);
				return reportList;
			}
		} else {
			return null;
		}
	}

	private StringBuilder cellCheck(List<PrescribeCell> cellList) {
		// TODO Auto-generated method stub
		
		List<Long> drugids =new ArrayList<Long>();
		for(PrescribeCell p: cellList){
			drugids.add(p.getBasicDrugData().getId());
		}
		List<DrugType> t =drugTypeService.findBydrugids(drugids);
		List<DrugType> dt =getRepeatDrug(t);
		if(dt.size()>=1){
			for(DrugType d: dt){
				
			}
		}	
		return null;
	}
	
	
	
	

	private List<DrugType> getRepeatDrug(List<DrugType> cellList) {
		for (int i = 0; i < cellList.size(); i++) {
			String value = (String) cellList.get(i).getClassifyThree();
			int count = 0;
			for (int j = 0; j < cellList.size(); j++) {
				if (value.equals(cellList.get(j).getClassifyThree())) {
					count++;
				}
			}
			if (count <= 1) {
				cellList.remove(value);
			}
			count = 0;
		}

		return cellList;
	}

	/**
	 * 
	 * @Title: array_unique
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @param @param a
	 * @param @return 设定文件
	 * @return String[] 返回类型
	 * @throws
	 * @author HuZongjian
	 * @date 2015-2-5 上午9:00:50
	 */

	public static String[] array_unique(String[] a) {
		// array_unique
		List<String> list = new LinkedList<String>();
		for (int i = 0; i < a.length; i++) {
			if (!list.contains(a[i])) {
				list.add(a[i]);

			}
		}
		for (int j = 0; j < list.size(); j++) {
			String y = list.get(j).substring(1, list.get(j).length() - 1);
			for (int k = j + 1; k < list.size(); k++) {
				if (list.get(k).contains(y)) {
					list.remove(j);
				}
			}
		}

		return (String[]) list.toArray(new String[list.size()]);
	}

	/**
	 * 
	 * 分别检测2 3 4 级别是否重复
	 * 
	 */
	@Resource
	DrugTypeService drugTypeService;

	private StringBuilder cellCheck(int endOff, List<PrescribeCell> cellList) {

		int begin = 0;
		int end = 1;
		int listsize = cellList.size();
		StringBuilder repeatInfo = new StringBuilder();
		// 如果前endOff位相同，并且endOff/2+1级分类为空，那么说明同属于endOff/2级分类
		while (end < listsize) {
			BasicDrugCheck basicBegin = bDaoImpl.get(cellList.get(begin)
					.getBasicDrugCheck().getBasicDrugCheckId());
			BasicDrugCheck basicEnd = bDaoImpl.get(cellList.get(end)
					.getBasicDrugCheck().getBasicDrugCheckId());
			String sBegin = basicBegin.getDrugCode().substring(0, endOff);
			String sEnd = basicEnd.getDrugCode().substring(0, endOff);
			while (end < listsize && sBegin.equals(sEnd)) {
				end++;
				if (end < listsize) {
					basicEnd = bDaoImpl.get(cellList.get(end)
							.getBasicDrugCheck().getBasicDrugCheckId());
					sEnd = basicEnd.getDrugCode().substring(0, endOff);
				}

				else {
					break;
				}
			}
			int count = end - begin;
			if (count > 1) {
				// 如果s1存在于检测表中，则表示此级别是需要检查的等级
				List<RepeatDrugLimit> list = repeatDrugLimitDao
						.findByLevel(sBegin);
				if (list.size() > 0 || endOff == 13) {// 如果存在并且
					StringBuilder sb = new StringBuilder();
					StringBuilder drugNames = new StringBuilder();
					String drugtype = "";
					while (begin < end) {
						String typex = "";
						if (endOff == 4) {
							typex = cellList.get(begin).getBasicDrugCheck()
									.getClassifyTwo();
							drugtype = typex.substring(endOff, typex.length());
						}
						if (endOff == 6) {
							typex = cellList.get(begin).getBasicDrugCheck()
									.getClassifyThree();
							drugtype = typex.substring(endOff, typex.length());
						}
						if (endOff == 8) {
							typex = cellList.get(begin).getBasicDrugCheck()
									.getClassifyFour();
							drugtype = typex.substring(endOff, typex.length());
						}
						if (endOff == 13) {
							drugtype = cellList.get(begin).getBasicDrugCheck()
									.getDrugName();
						}

						drugNames.append(cellList.get(begin).getDrugName())
								.append("、");
						begin++;

					}
					sb.append("【")
							.append(drugNames.substring(0,
									drugNames.length() - 1)).append("】");
					sb.append("都是" + drugtype);
					repeatInfo.append(sb.toString()).append(";");
				}
			}
			begin = end;
			end += 1;
		}
		return repeatInfo;
	}

}
