<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="   
          http://www.springframework.org/schema/beans   
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
          http://www.springframework.org/schema/tx   
          http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
          http://www.springframework.org/schema/context   
          http://www.springframework.org/schema/context/spring-context-3.0.xsd   
          http://www.springframework.org/schema/aop   
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	default-autowire="byName">
	<bean id="c3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/shyShine" />
		<property name="user" value="root" />
		<property name="password" value="root123" />

		<!-- 连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="5" />
		<!-- 连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="15" />
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="3" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="10" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="0" />
		<!-- 每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure" value="false" />
		<!-- 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="false" />
	</bean>


	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref local="c3p0DataSource" />
		</property>
	
		<property name="packagesToScan" value="com.springmvc.*.domain"></property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.autoReconnect">true</prop>
				<prop key="hibernate.max_fech_depth">5</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="hibernate.jdbc.fetch_size">100</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext
				</prop>
				<prop key="hibernate.transaction.factory_class"> org.hibernate.transaction.JDBCTransactionFactory
				</prop>
				<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
			</props>
		</property>

	</bean>

	<!-- 不破坏数据库,注册SessionFactory -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<!-- <property name="globalRollbackOnParticipationFailure" value="false" />  -->
	</bean>
	<aop:aspectj-autoproxy expose-proxy="true" />
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.springmvc.base.service.impl.*.*(..))"
			advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.springmvc.base.dao.*.*(..))"
			advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.springmvc.base.dao.impl.*.*(..))"
			advice-ref="txAdvice" />
			<aop:advisor pointcut="execution(* com.springmvc.base.service.*.*(..))"
			advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.springmvc.relationdrug.service.impl.*.*(..))"
			advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.springmvc.relationdrug.dao.*.*(..))"
			advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.springmvc.relationdrug.dao.impl.*.*(..))"
			advice-ref="txAdvice" />
			<aop:advisor pointcut="execution(* com.springmvc.relationdrug.service.*.*(..))"
			advice-ref="txAdvice" />		
					
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice> 
	
<!-- 自动扫描组件，需要把controller去掉，否则影响事务管理 -->
	<context:component-scan base-package="com.springmvc">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 合理用药jar包 
	<context:component-scan base-package="com.health">
		
	</context:component-scan>-->
   
<!-- 	<import resource="classpath:/config/springmvc-quartz.xml"/> -->
	
	
	
</beans>